{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Suppress warnings\n",
    "import warnings \n",
    "warnings.simplefilter('ignore')\n",
    "\n",
    "import pyrcel as pm\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import gridspec\n",
    "import matplotlib.animation as animation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def run_default_parcel(h):\n",
    "    # environmental variables\n",
    "    P0 = 1e5 # Initial Pressure, Pa\n",
    "    T0 = 280.   # Initial Temperature, K\n",
    "    S0 = -0.15  # Initial Supersaturation, 1-RH (85% here)\n",
    "\n",
    "    # regime-determining variables\n",
    "    w = 6.0 # updraft velocity (m/s)\n",
    "    N = w*2.0e3 # total particle number\n",
    "\n",
    "    # initial lognormal distribution variables\n",
    "    # shared variables\n",
    "    sig = 1.5 # geometric standard deviation\n",
    "    bins = 200 # number of bins to track (maybe choose this in relation to sigma)\n",
    "    \n",
    "    name1 = 'default'\n",
    "    mu1 = 0.1\n",
    "    kappa1 = 0.5\n",
    "    aer1 = pm.AerosolSpecies(name1, pm.Lognorm(mu=mu1, sigma=sig, N=N), kappa=kappa1, bins=bins)\n",
    "    initial_aerosols = [aer1]\n",
    "\n",
    "    dt = 1.0 # timestep (s)\n",
    "    h_end = h # end altitude (m)\n",
    "    t_end = h_end/w # end time (s)\n",
    "\n",
    "    model = pm.ParcelModel(initial_aerosols, w, T0, S0, P0, console=False, accom=0.5)\n",
    "    parcel_trace, aerosol_traces = model.run(t_end, dt, solver='cvode')\n",
    "\n",
    "    return(initial_aerosols, parcel_trace, aerosol_traces)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_anim(parcel_trace, aerosol_trace, init_aer, name):\n",
    "    T = parcel_trace[\"T\"].values\n",
    "    z = parcel_trace[\"z\"].values\n",
    "    N = init_aer.Nis\n",
    "    r = aerosol_trace.values\n",
    "    frames = np.shape(z)[0]\n",
    "\n",
    "    # initialize figure and axes\n",
    "    fig = plt.figure(figsize=(10,6))\n",
    "    gs = gridspec.GridSpec(1, 2, width_ratios=[1,4]) \n",
    "    ax1 = fig.add_subplot(gs[0])\n",
    "    ax2 = fig.add_subplot(gs[1])\n",
    "    \n",
    "    # initialize parcel profile plot\n",
    "    Tprof, = ax1.plot(T[0:1],z[0:1],'ro-')\n",
    "    ax1.grid(True, linestyle = '-', color = '0.5')\n",
    "    ax1.set_xlim([np.min(T), np.max(T)])\n",
    "    ax1.set_ylim([np.min(z), np.max(z)])\n",
    "    ax1.set_xlabel(\"Temp. (K)\")\n",
    "    ax1.set_ylabel(\"Alt. (m)\")\n",
    "    \n",
    "    # initialize aerosol distribution plot\n",
    "    maxN = np.max(N)\n",
    "    dist, = ax2.semilogx(r[0,:], N/maxN, 'bo-')\n",
    "    ax2.grid(True, linestyle = '-', color = '0.55')\n",
    "    ax2.set_xlim([np.min(r), np.max(r)])\n",
    "    ax2.set_ylim([0,1])\n",
    "    ax2.set_xlabel(\"Droplet radius ($\\mu$m)\")\n",
    "    ax2.set_ylabel(\"Number\")\n",
    "    ax2.yaxis.tick_right()\n",
    "\n",
    "    def _update_plot(i):\n",
    "        # update parcel plot\n",
    "        Tprof.set_xdata(T[0:i+1])\n",
    "        Tprof.set_ydata(z[0:i+1])\n",
    "        # update aerosol distribution plot\n",
    "        dist.set_xdata(r[i,:])\n",
    "        dist.set_ydata(N/maxN)\n",
    "        # return\n",
    "        return Tprof, dist,\n",
    "\n",
    "    # Set up formatting for the movie files\n",
    "    Writer = animation.writers['ffmpeg']\n",
    "    writer = Writer(fps=30)\n",
    "\n",
    "    anim = animation.FuncAnimation(fig, _update_plot, frames=frames)\n",
    "    anim.save(\"anims/parcel_evolution_\"+name+\".mp4\", writer=writer, dpi=300)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "h = 2e3\n",
    "initial_aerosols, parcel_trace, aerosol_traces = run_default_parcel(h)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#for i,key in enumerate(aerosol_traces.keys()):\n",
    "i = 0\n",
    "key = \"default\"\n",
    "init_aer = initial_aerosols[i]\n",
    "aerosol_trace = aerosol_traces[key]\n",
    "make_anim(parcel_trace, aerosol_trace, init_aer, key)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def _update_plot(i, fig, scat):\n",
    "    scat.set_offsets(([0, i], [50, i], [100, i]))\n",
    "    #print('Frames: {}'.format(i)) # For Python3\n",
    "    return scat\n",
    "\n",
    "# Set up formatting for the movie files\n",
    "Writer = animation.writers['ffmpeg']\n",
    "writer = Writer(fps=15, metadata=dict(artist='Me'), bitrate=1800)\n",
    "\n",
    "fig = plt.figure()\n",
    "\n",
    "x = [0, 50, 100]\n",
    "y = [0, 0, 0]\n",
    "\n",
    "ax = fig.add_subplot(111)\n",
    "ax.grid(True, linestyle = '-', color = '0.75')\n",
    "ax.set_xlim([-50, 200])\n",
    "ax.set_ylim([-50, 200])\n",
    "\n",
    "scat = plt.scatter(x, y, c='r', marker='o')\n",
    "scat.set_alpha(0.8)\n",
    "\n",
    "anim = animation.FuncAnimation(fig, _update_plot, fargs = (fig, scat), frames = 100, interval = 100)\n",
    "anim.save('anims/anim_scat.mp4', writer=writer, dpi=300)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "x = np.arange(0, 2*np.pi, 0.01)\n",
    "y = np.sin(x)\n",
    "line, = ax.plot(x, y)\n",
    "\n",
    "def init():  # only required for blitting to give a clean slate.\n",
    "    line.set_ydata([np.nan] * len(x))\n",
    "    return line,\n",
    "\n",
    "def _update_plot(i):\n",
    "    #line.set_ydata(np.sin(x + i / 100))  # update the data.\n",
    "    line.set_xdata(x+i/100)\n",
    "    line.set_ydata(y)\n",
    "    return line,\n",
    "\n",
    "# Set up formatting for the movie files\n",
    "Writer = animation.writers['ffmpeg']\n",
    "writer = Writer(fps=15, metadata=dict(artist='Me'), bitrate=1800)\n",
    "\n",
    "anim = animation.FuncAnimation(fig, _update_plot, init_func=init, interval=2, blit=True, save_count=50)\n",
    "anim.save(\"anims/anim_line.mp4\", writer=writer, dpi=300)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = plt.figure(figsize=(10,6))\n",
    "gs = gridspec.GridSpec(1, 2, width_ratios=[1,4]) \n",
    "ax1 = fig.add_subplot(gs[0])\n",
    "ax2 = fig.add_subplot(gs[1])\n",
    "\n",
    "frames = 100\n",
    "\n",
    "T = 300 - np.arange(frames+1)\n",
    "z = np.arange(frames+1)\n",
    "\n",
    "Tprof, = ax1.plot(T[0:1],z[0:1],'ro-')\n",
    "ax1.grid(True, linestyle = '-', color = '0.5')\n",
    "ax1.set_xlim([np.min(T), np.max(T)])\n",
    "ax1.set_ylim([np.min(z), np.max(z)])\n",
    "ax1.set_xlabel(\"Temp. (K)\")\n",
    "ax1.set_ylabel(\"Alt. (m)\")\n",
    "\n",
    "r = np.zeros((frames,100))\n",
    "for i in np.arange(frames):\n",
    "    r[i,:] = np.linspace(i/100,2*np.pi+i/100,100)\n",
    "N = np.sin(r[0,:])\n",
    "dist, = ax2.plot(r[0,:], N, 'bo-')\n",
    "ax2.grid(True, linestyle = '-', color = '0.55')\n",
    "ax2.set_xlim([np.min(r), np.max(r)])\n",
    "ax2.set_ylim([np.min(N), np.max(N)])\n",
    "ax2.set_xlabel(\"Droplet radius ($\\mu$m)\")\n",
    "ax2.set_ylabel(\"Number\")\n",
    "ax2.yaxis.tick_right()\n",
    "\n",
    "def _update_plot(i):\n",
    "    Tprof.set_xdata(T[0:i+1])\n",
    "    Tprof.set_ydata(z[0:i+1])\n",
    "    \n",
    "    dist.set_xdata(r[i,:])\n",
    "    dist.set_ydata(N)\n",
    "    \n",
    "    return prof, dist,\n",
    "\n",
    "# Set up formatting for the movie files\n",
    "Writer = animation.writers['ffmpeg']\n",
    "writer = Writer(fps=10, metadata=dict(artist='Clare Singer'), bitrate=1800)\n",
    "\n",
    "anim = animation.FuncAnimation(fig, _update_plot, frames=frames, interval=100)\n",
    "anim.save(\"anims/anim_two_panel.mp4\", writer=writer, dpi=300)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
